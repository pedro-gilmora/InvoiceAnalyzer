@page "/doc-analyzer"
@using Markdig
@inject AiInvoiceAnalyzerService service;

<PageTitle>Counter</PageTitle>

<FluentInputFile Id="doc-receiver"
Mode="InputFileMode.Buffer"
Multiple="true"
MaximumFileCount="4"
MaximumFileSize="@(10*1024*1024)"
Accept="image/*"
@bind-ProgressPercent="@ProgressPercent"
OnCompleted="@OnCompletedAsync"
Style="height: 250px;border-radius: 4px;">
    <ChildContent>
        <label for="doc-receiver">
            <FluentIcon Value="@(new FluentIcons24.ArrowUpload())" />
        </label>
        <div>
            Drag files here you wish to upload,
            or <label for="doc-receiver">browse</label>
            for them<span style="color: red;">*</span>.
            <br />
            <em>Maximum of 4 files allowed.</em>
            <br />
            @(isUploading ? $"Uploading file {fileUploading}..." : "")
        </div>
    </ChildContent>
</FluentInputFile>

<FluentLabel MarginBlock="8px">@((MarkupString)response)</FluentLabel>

@if (Files.Any())
{
    <h4>File(s) uploaded:</h4>
    <ul>
        @foreach (var file in Files)
        {
            <li>
                <b>@file.Name</b> 🔹
                @($"{Decimal.Divide(file.Size, 1024):N} KB") 🔹
                @file.ContentType 🔹
                @file.LocalFile?.FullName
                @file.ErrorMessage
            </li>
        }
    </ul>
}

@code
{
    string response = "", fileUploading = "";

    bool isUploading = false;

    int ProgressPercent = 0;

    FluentInputFileEventArgs[] Files = [];
    const char q = '"';

    private async Task OnCompletedAsync(IEnumerable<FluentInputFileEventArgs> files)
    {
        isUploading = true;
        response = "";
        try
        {
            foreach (var file in files)
            {
                fileUploading = file.Name;

                var docId = await service.UploadAsync(fileUploading, file.ContentType, file.Buffer.Data[..file.Buffer.BytesRead]);

                _ = Task.Run(async () =>
                {
                    response += $"<br/>Waiting for {fileUploading} to be ready...<br/>";

                    while (await service.IsNotReadyDocument(docId)) 
                    {
                        await Task.Delay(500);
                    }

                    var markdown = await service.QueryAsync($@"Que tipo de documento es el archivo {fileUploading}?

Si es un documento Factura se deberá extraer la siguiente información de forma automática y mostrar al usuario en una modal:
- Cliente (Nombre y dirección)
- Proveedor (Nombre y dirección)
- No. De factura.
- Fecha.
- Productos (Incluir cantidad, nombre, precio unitario y total).
- Total de la factura.

Si es un documento de Información se deberá extraer lo siguiente de forma automática y mostrar al usuario en una modal:
- Descripción.
- Resumen.
- Sentimiento.

Responde tan breve como puedas");

                    response += $@"

------

About {fileUploading}:{(Markdig.Markdown.ToHtml(markdown is [q, .. var str, q] ? str : markdown))}

------";
                });
            }
        }
        catch (Exception e)
        {
            response = "We got an error: " + e.Message;
        }
        finally
        {
            isUploading = false;
            ProgressPercent = 0;
        }
    }
}
